[flask]
# The ip used by the flask server
host = 
# The port used by the flask server
port = 
 
[policy]

# The controller type to use
# Options currently available:
# basic -> simple, reactive, interval-based controller
controller = 

# The actuator type to use
# Options currently available
# basic -> runs locally, uses ssh to access instances
actuator =

# The metric source type to use 
# Options currently available
# monasca -> uses monasca api to access a monasca instance. Reads configuration from monitor.cfg
# nop -> No-operation implementation. Returns always 0.
metric_source = 


# Parameters used by the scaler. May vary depending on controller, actuator and metric source types.
[scaling]

# Time between application state checks, in seconds.
# The controller checks the applications states every check_interval seconds.
check_interval = 

# The absolute value of the difference between job progress and time progress that triggers the scale down.
trigger_down = 

# The absolute value of the difference between job progress and time progress that triggers the scale up.
trigger_up = 

# Minimum possible value of CPU cap.
# Must be in range [0,100]
min_cap = 

# Maximum possible value of CPU cap.
# Must be in range [0,100]
max_cap = 

# Amount of resources added or removed when scaling up or down.
# Must be in range [0,100]
actuation_size = 

# The amount of decimal digits considered when taking scaling decisions.
# e.g.:
# If the scaler gets a metric value 0.567 from the metric source and metric_rounding = 2
# then the value the scaler will use is 0.57.
metric_rounding =
